#==============
# basic
#==============
set -g prefix C-b

# Scroll History
set -g history-limit 30000

set -s escape-time 0

set-window-option -g xterm-keys on

if "infocmp tmux-256color" {
  set -g default-terminal tmux-256color
} {
  set -g default-terminal screen-256color
}

# Use vi key bindings in copy and choice modes
setw -g mode-keys vi

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# enable mouse
set -g mouse off

# focus events enabled for terminals that support them
set -g focus-events on

set-option -g set-titles on
set-option -g set-titles-string "#W"

set -s set-clipboard on

# Automatically rename window to current dir.
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Start windows and panes index at 1, not 0.
set -g base-index 1
setw -g pane-base-index 1

# Ensure window index numbers get reordered on delete.
set-option -g renumber-windows on

#==============
# key bindings
#==============

bind r source-file ~/.tmux.conf\; display 'config reloaded'

bind | split-window -h -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-M-h' if-shell "$is_vim" 'send-keys C-M-h'  'select-pane -L'
bind-key -n 'C-M-j' if-shell "$is_vim" 'send-keys C-M-j'  'select-pane -D'
bind-key -n 'C-M-k' if-shell "$is_vim" 'send-keys C-M-k'  'select-pane -U'
bind-key -n 'C-M-l' if-shell "$is_vim" 'send-keys C-M-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-M-h' select-pane -L
bind-key -T copy-mode-vi 'C-M-j' select-pane -D
bind-key -T copy-mode-vi 'C-M-k' select-pane -U
bind-key -T copy-mode-vi 'C-M-l' select-pane -R

# map Vi movement keys as pane movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes using PREFIX ctrl-hjkl
bind c-h resize-pane -L 5
bind c-j resize-pane -D 5
bind c-k resize-pane -U 5
bind c-l resize-pane -R 5

# easier and faster switching between next/prev window
bind C-p previous-window
bind C-n next-window

# new windows are created next to the current
bind c new-window -a

# close window
bind c-x confirm-before -p "kill-window #W? (y/n)" kill-window

# copy mode
bind c-u copy-mode -u
bind c-[ copy-mode
bind c-] paste-buffer

if-shell -b "tmux -V | awk '{if($2<2.4){exit 0}else{exit 1}}'" \
    "bind-key -t vi-copy Escape cancel; \
    bind-key -t vi-copy v begin-selection; \
    bind-key -t vi-copy V select-line; \
    bind-key -t vi-copy r rectangle-toggle; \
    bind-key -t vi-copy y copy-selection "

if-shell -b "tmux -V | awk '{if($2>=2.4){exit 0}else{exit 1}}'" \
    "bind-key -T copy-mode-vi Escape send -X cancel; \
    bind-key -T copy-mode-vi 'v' send -X begin-selection; \
    bind-key -T copy-mode-vi 'V' send -X select-line; \
    bind-key -T copy-mode-vi 'r' send -X rectangle-toggle; \
    bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel"

if-shell -b "test $(uname) = 'Darwin' && \
    tmux -V | awk '{if($2>=2.4){exit 0}else{exit 1}}'" \
    "bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel pbcopy"

# Toggle mouse
bind-key M if-shell "tmux show -g -v mouse | grep -q 'on$'" "set-option -g mouse off \; display-message 'Mouse: OFF'" "set-option -g mouse on \; display-message 'Mouse: ON'"

# Capture last output command in vim.
bind-key c-e capture-pane -J -S - \; save-buffer /tmp/tmux-capture.txt \; new-window 'grep -E "^\\$\\|" /tmp/tmux-capture.txt -n | tail -2 | head -1 | cut -d: -f1 | xargs -I {} tail -n +{} /tmp/tmux-capture.txt | vim -'
# Capture entire pane history in vim.
bind-key e capture-pane -J -S - \; new-window 'tmux show-buffer | vim -'
# Clear pane history
bind-key K clear-history

# Pop up or detach from the floating session.
bind c-f if-shell -F '#{==:#{session_name},floating}' {
    detach-client
} {
    set -gF '@last_session_name' '#S'
    set -gF '@window_name' '#{window_name}'
    set -gF '@pane_current_path' '#{pane_current_path}'
    popup -d -xC -yC -w95% -h90% -E 'tmux_attach.sh "floating" "$(tmux show -gvq '@window_name')" "$(tmux show -gvq '@pane_current_path')"'
}

# Break the current pane into a new window.
bind ! if-shell -F '#{!=:#{session_name},floating}' {
    break-pane
} {
    run-shell 'bash -c "tmux break-pane -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

# Break the current pane into a new window in the background.
bind @ if-shell -F '#{!=:#{session_name},floating}' {
    break-pane -d
} {
    run-shell 'bash -c "tmux break-pane -d -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

#==============
# UI
#==============

# Border colors
set-option -g pane-border-style fg=colour240
set-option -g pane-active-border-style fg=colour250
set-option -g popup-border-lines rounded

#-------------
# Status bar
#-------------
set-option -g status on # turn the status bar on
set -g status-interval 1 # set update frequency (default 15 seconds)
set -g status-justify left # window list on left side

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# set color for status bar
set-option -g status-bg black
set-option -g status-fg white

# window list
set-window-option -g window-status-format '#[fg=white] #I:#W#F '
set-window-option -g window-status-current-format '#[fg=white,bg=red] #I:#W#F '
set-window-option -g window-status-separator ''

set -g status-left ""

# Right side of status bar:
#  prefix indicator,
#  session:window:pane number,
#  date time.
set -g status-right "#{prefix_highlight}\
#[fg=blue] #S:#I:#P \
#[fg=yellow]#{=/-40/â€¦:#{s|^$HOME|~:pane_current_path}} \
#[fg=green]%a %m/%d %H:%M:%S"
set -g status-right-length 70

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'jaclu/tmux-menus'
set -g @menus_trigger 'Space'
run -b '~/dotfiles/tmux/tpm/tpm'
