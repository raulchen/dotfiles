DOTFILES=$HOME/dotfiles

# === Environmental variables ===

export PATH="$HOME/bin:$DOTFILES/bin:/opt/homebrew/bin:$PATH"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export XDG_CONFIG_HOME=~/.config

if which nvim >/dev/null 2>&1 ; then
    export EDITOR='nvim'
else
    export EDITOR='vim'
fi

# === zsh settings ===

HISTSIZE=130000
SAVEHIST=130000
HYPHEN_INSENSITIVE="true"

# Ctrl-V: edit in vim
bindkey '^V' edit-command-line
bindkey -M vicmd '^V' edit-command-line

# Expand ".../"
function expand-dots {
   if [[ $LBUFFER =~ ".*\.\.\.$" ]]; then
	 zle _expand_alias
	 zle expand-word
   fi
   zle self-insert
}
zle -N expand-dots
bindkey -M viins "/" expand-dots

# === Antigen settings ===

# Install Antigen if not already installed
[[ ! -d "$HOME/.antigen" ]] && git clone --depth 1 https://github.com/zsh-users/antigen.git "$HOME/.antigen"
source "$HOME/.antigen/antigen.zsh"

# Load the oh-my-zsh library
antigen use oh-my-zsh

# Load plugins
antigen bundle Aloxaf/fzf-tab
antigen bundle colored-man-pages
antigen bundle extract
antigen bundle git
antigen bundle git-prompt
antigen bundle jeffreytse/zsh-vi-mode
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-syntax-highlighting
# zsh-history-substring-search should be loaded after zsh-syntax-highlighting
antigen bundle zsh-users/zsh-history-substring-search

if [[ `uname` == 'Darwin' ]]; then
    antigen bundle macos
    antigen bundle brew
fi

# The following plugins will be loaded only when the corresponding commands exist.
typeset -A commands_to_plugins=(
    "bazel" "bazel"
    "mvn" "mvn"
    "pyenv" "davidparsson/zsh-pyenv-lazy"
    "zoxide" "zoxide"
)

for cmd in ${(@k)commands_to_plugins}; do
    if [[ $(command -v "$cmd") ]]; then
        antigen bundle "$commands_to_plugins[$cmd]"
    fi
done

antigen theme $DOTFILES/zsh my-theme --no-local-clone

# Apply antigen bundles
antigen apply

# === plugin configs ===

# zsh-history-substring-search
function _zshrc_bind_history_substring_search_keys() {
    # Up/down arrows
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    # The above bindings may not work in some terminals,
    # the following bindings are also set for up/down arrows.
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down
    # Ctrl-N/P
    bindkey '^P' history-substring-search-up
    bindkey '^N' history-substring-search-down
    # k/j in vim mode
    bindkey -M vicmd 'k' history-substring-search-up
    bindkey -M vicmd 'j' history-substring-search-down
}
# Postpone keybindings until zsh-vi-mode is loaded,
# otherwise they will be overridden by zsh-vi-mode.
zvm_after_init_commands+=(_zshrc_bind_history_substring_search_keys)

# fzf-tab
# Disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'
# Use tmux popup window
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# === fzf settings ===

if type fd >/dev/null 2>&1 ; then
    export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

    # Use fd for listing path candidates.
    _fzf_compgen_path() {
        fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
    }
fi
export FZF_FILE_PREVIEW_CMD="bat -n --color=always --line-range :$LINES {}"
export FZF_DIR_PREVIEW_CMD="ls -1 --color=always {}"
export FZF_PREVIEW_WINDOW="right,50%,<70(down,50%)"
export FZF_TMUX_OPTS='-p90%,90%'
FZF_DEFAULT_BIND="
ctrl-q:toggle-all,
ctrl-u:half-page-up,
ctrl-d:half-page-down,
ctrl-k:preview-up,
ctrl-j:preview-down,
ctrl-/:toggle-preview
"
FZF_DEFAULT_BIND="${FZF_DEFAULT_BIND//$'\n'/}"
export FZF_DEFAULT_OPTS="--reverse --bind '$FZF_DEFAULT_BIND'"
export FZF_CTRL_T_OPTS="
  --preview '[ -f {} ] && $FZF_FILE_PREVIEW_CMD || [ -d {} ] && $FZF_DIR_PREVIEW_CMD'
  --preview-window $FZF_PREVIEW_WINDOW"
export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:3:hidden:wrap
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'CTRL-Y to copy command; CTRL-/ to preview full command'"

function _zshrc_init_fzf() {
    if type fzf >/dev/null 2>&1 ; then
        eval "$(fzf --zsh)"
        # https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh
        source $DOTFILES/zsh/fzf-git.sh
    fi
}

# Postpone fzf initialization until zsh-vi-mode is loaded,
# otherwise fzf keybindings will be overridden by zsh-vi-mode.
zvm_after_init_commands+=(_zshrc_init_fzf)

# === Load aliases, functions, and local settings ===

source $DOTFILES/zsh/alias.zsh
source $DOTFILES/zsh/functions.zsh

if test -e "$DOTFILES/zsh/zshrc.local"; then
    source "$DOTFILES/zsh/zshrc.local"
fi

# === Misc ===

if type bat >/dev/null 2>&1 ; then
    export BAT_THEME="ansi"
fi
